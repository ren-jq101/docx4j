<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.sonatype.oss</groupId>
    <artifactId>oss-parent</artifactId>
    <version>9</version>
  </parent>

	<groupId>org.docx4j</groupId>
	<artifactId>docx4j-parent</artifactId>	
	<version>${revision}</version>
	
	<properties>
		<revision>11.4.8</revision>
		<packaging.type>jar</packaging.type>
	    <!-- <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> -->
	    <!-- github server corresponds to entry in ~/.m2/settings.xml -->
	    <github.global.server>github</github.global.server>
		<version.logback-classic>1.5.13</version.logback-classic>
		<version.maven-jar-plugin>2.3.1</version.maven-jar-plugin>
		<version.maven-bundle-plugin>5.1.2</version.maven-bundle-plugin>
	</properties>

    <packaging>pom</packaging>

    <name>docx4j parent</name>
    
    <modules>
        <module>docx4j-openxml-objects</module>
        <module>docx4j-openxml-objects-pml</module>
        <module>docx4j-openxml-objects-sml</module>
        <module>docx4j-core</module>
        
        <module>docx4j-core-tests</module> <!--  needs docx4j-JAXB-Internal  -->
        <module>docx4j-diffx</module>
        <module>docx4j-docx-anon</module> 
        
        <module>docx4j-export-fo</module>        
        <module>docx4j-conversion-via-microsoft-graph</module>
        <module>docx4j-documents4j-remote</module>                
        <module>docx4j-documents4j-local</module>        
        
        <module>docx4j-JAXB-MOXy</module>
        <module>docx4j-JAXB-ReferenceImpl</module>
        
        <module>docx4j-samples-resources</module>
        <module>docx4j-samples-docx4j</module>
        <module>docx4j-samples-docx-diffx</module>
        <module>docx4j-samples-docx-export-fo</module>
        <module>docx4j-samples-pptx4j</module>
        <module>docx4j-samples-xlsx4j</module>
        <module>docx4j-samples-glox4j</module>
        
        <module>docx4j-samples-conversion-via-microsoft-graph</module>

        <module>docx4j-samples-documents4j-remote</module>        
        <module>docx4j-samples-documents4j-local</module>        
        
        <module>docx4j-bundle</module>        
        
        <module>docx4j-legacy-service</module>        
        
    </modules>
	
	<description>
		docx4j is a library which helps you to work with the Office Open
		XML file format as used in docx
		documents, pptx presentations, and xlsx spreadsheets.
	</description>
	<url>http://www.docx4java.org/</url>
	<licenses>
	  <license>
	    <name>Apache 2</name>
	    <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
	    <distribution>repo</distribution>
	    <comments>A business-friendly OSS license</comments>
	  </license>
  	</licenses>
  	
	<!--  https://central.sonatype.org/pages/requirements.html
	      requires developers be populated. Others have 
	      contributed to docx4j over the years; see the CHANGELOG -->
	<developers>
		<developer>
			<name>Jason Harrop</name>
			<email>jason@plutext.org</email>
			<organization>Plutext</organization>
			<organizationUrl>http://www.plutext.com</organizationUrl>
		</developer>
	</developers>
  	
	<scm>
	    <developerConnection>scm:git|git@github.com:plutext/docx4j.git</developerConnection>
      <tag>VERSION_11_4_5</tag>
  </scm>
	<inceptionYear>2007</inceptionYear>

	
	<build>

	<pluginManagement>
		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.5.3</version>
				<configuration>
					<mavenExecutorId>forked-path</mavenExecutorId>
					<useReleaseProfile>false</useReleaseProfile>
					<arguments>${arguments} -Psonatype-oss-release</arguments>
					<!-- run the install step again, to get META-INFO without -SNAPSHOT -->
					<preparationGoals>clean install</preparationGoals>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.1.0</version>
			</plugin>

			<plugin>
				<groupId>org.eclipse.m2e</groupId>
				<artifactId>lifecycle-mapping</artifactId>
				<version>1.0.0</version>
				<configuration>
					<lifecycleMappingMetadata>
						<pluginExecutions>
							<pluginExecution>
								<pluginExecutionFilter>
									<groupId>org.codehaus.mojo</groupId>
									<artifactId>flatten-maven-plugin</artifactId>
									<versionRange>[1.0.0,)</versionRange>
									<goals>
										<goal>flatten</goal>
										<goal>clean</goal>
									</goals>
								</pluginExecutionFilter>
								<action>
									<ignore/>
								</action>
							</pluginExecution>
						</pluginExecutions>
					</lifecycleMappingMetadata>
				</configuration>
			</plugin>
		</plugins>
	</pluginManagement>    
    	
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<release>11</release>				
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>
			
			<!--  you can run this with: mvn validate
			      See further https://stackoverflow.com/questions/24827194/maven-enforcer-plugin-missing-or-invalid-rules 
			      
			      2019 05 25 should work with Java 11: https://github.com/mojohaus/extra-enforcer-rules/pull/63
			      but it doesn't.
			      
			      Seems to work with Java 12 though -->
			      
		     <plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-enforcer-plugin</artifactId>
		        <version>3.0.0-M2</version> 
		        <executions>
		          <execution>
		            <id>enforce-bytecode-version</id>
		            <goals>
		              <goal>enforce</goal>
		            </goals>
		            <configuration>
		              <rules>
		                <enforceBytecodeVersion>
		                  <maxJdkVersion>11</maxJdkVersion>
		                  <excludes>
		                    <exclude>org.mindrot:jbcrypt</exclude>
		                  </excludes>
		                </enforceBytecodeVersion>
		              </rules>
		              <fail>true</fail>
		            </configuration>
		          </execution>
		        </executions>
		        <dependencies>
		          <dependency>
		            <groupId>org.codehaus.mojo</groupId>
		            <artifactId>extra-enforcer-rules</artifactId>
		            <version>1.2</version>
		          </dependency>
		        </dependencies> 
		      </plugin>
	       			
			<plugin>
				<artifactId>maven-source-plugin</artifactId>
				<!-- The Source Plugin creates a jar archive of the source files of the
					current project. -->
				<version>3.0.1</version>
				<executions>
					<execution>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Maven Central REQUIRES Javadoc

				 hiccups on org.slf4j since it is a multi-release jar
				 broken in Java 11, fixed in Java 12
				 https://bugs.openjdk.java.net/browse/JDK-8222309
			 -->			 
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.1.0</version> 
				<configuration>
					<maxmemory>512m</maxmemory>
					<additionalJOption>-Xdoclint:none</additionalJOption>
					<javadocExecutable>${java.home}/bin/javadoc</javadocExecutable>  
					<!-- workaround for 'javadoc: error - The code being documented uses packages in the unnamed module' issue 
						 still present in Java 14!
						 https://stackoverflow.com/a/63475569/1031689
						 -->
				    <source>8</source>
				    <detectJavaApiLink>false</detectJavaApiLink>
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
<!-- 			
		<plugin>
            <groupId>org.basepom.maven</groupId>
            <artifactId>duplicate-finder-maven-plugin</artifactId>
            <version>1.2.0</version>
            <executions>
                <execution>
                    <id>default</id>
                    <phase>verify</phase>
                    <goals>
                        <goal>check</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <printEqualFiles>false</printEqualFiles>
                <failBuildInCaseOfDifferentContentConflict>true</failBuildInCaseOfDifferentContentConflict>
                <failBuildInCaseOfEqualContentConflict>false</failBuildInCaseOfEqualContentConflict>
                <failBuildInCaseOfConflict>false</failBuildInCaseOfConflict>
                <checkCompileClasspath>true</checkCompileClasspath>
                <checkRuntimeClasspath>true</checkRuntimeClasspath>
                <checkTestClasspath>true</checkTestClasspath>
                <skip>false</skip>
                <quiet>false</quiet>
                <preferLocal>true</preferLocal>
                <useResultFile>true</useResultFile>
                <resultFileMinClasspathCount>2</resultFileMinClasspathCount>
                <resultFile>${project.build.directory}/duplicate-finder-result.xml</resultFile>
                
				<includeBootClasspath>true</includeBootClasspath>
                <bootClasspathProperty>sun.boot.class.path</bootClasspathProperty>                

            </configuration>
        </plugin>
 -->
 			
			<plugin>
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>flatten-maven-plugin</artifactId>
			    <version>1.0.0</version>
			    <configuration>
			        <!--  <updatePomFile>true</updatePomFile>-->
			        <flattenMode>oss</flattenMode>           
			    </configuration>
			    <executions>
			        <execution>
			            <id>flatten</id>
			            <phase>process-resources</phase>
			            <goals>
			                <goal>flatten</goal>
			            </goals>
			        </execution>
			        <execution>
			            <id>flatten.clean</id>
			            <phase>clean</phase>
			            <goals>
			                <goal>clean</goal>
			            </goals>
			        </execution>
			    </executions>
			</plugin>			
			
		</plugins>
	</build>

	<dependencies>

		<!--  docx4j v11.4.0 and later use JAXB 3.0 -->
		<dependency>
			<groupId>jakarta.xml.bind</groupId>
			<artifactId>jakarta.xml.bind-api</artifactId>
			<version>3.0.1</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
  			<version>2.0.0-alpha6</version>
  		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>

	</dependencies>	
	

<!-- 
<distributionManagement>
    <repository>
        <id>internal.repo</id>
        <name>Temporary Staging Repository</name>
        <url>file://${project.build.directory}/mvn-repo</url>
    </repository>
</distributionManagement>
 -->

	<profiles> <!--  use -P eg mvn -Psign-artifacts  -->
		<profile>
			<id>sign-artifacts</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.4</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>OSGi</id>
			<properties>
				<packaging.type>bundle</packaging.type>
			</properties>
		</profile>
		

		<!-- Deploy a snapshot to GitHub  
		
			 See http://stackoverflow.com/questions/14013644/hosting-a-maven-repository-on-github
			 
			 To do this:
			 0. uncomment distribution management above
			 1. comment out parent element (top of pom), since this is what makes deploy push to https://oss.sonatype.org
			 2. comment out maven-javadoc-plugin, since its not worth bothering with that large upload
			 3. execute 
			  
			       mvn clean deploy  -Pgithub-mvn-repo
		
		 -->		
		<profile>
			<id>github-mvn-repo</id>
			<build>
			
				<plugins>
				
				    <plugin>
				        <artifactId>maven-deploy-plugin</artifactId>
				        <version>2.8.1</version>
				        <configuration>
				            <altDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo</altDeploymentRepository>
				        </configuration>
				    </plugin>
				
			        <plugin>
			            <groupId>com.github.github</groupId>
			            <artifactId>site-maven-plugin</artifactId>
			            <version>0.12</version>
			            <configuration>
			            	<server>github</server>
			            	<merge>true</merge>
			                <message>Maven artifacts for ${project.version}</message>  <!-- git commit message -->
			                <noJekyll>true</noJekyll>                                  <!-- disable webpage processing -->
			                <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory> <!-- matches distribution management repository url above -->
			                <branch>refs/heads/mvn-repo</branch>                        <!-- remote branch name -->
			                <includes><include>**/*</include></includes>
			                <repositoryName>docx4j</repositoryName>      <!-- github repo name -->
			                <repositoryOwner>plutext</repositoryOwner>    <!-- github username  -->
			            </configuration>
			            <executions>
			              <!-- run site-maven-plugin's 'site' target as part of the build's normal 'deploy' phase -->
			              <execution>
			                <goals>
			                  <goal>site</goal>
			                </goals>
			                <phase>deploy</phase>
			              </execution>
			            </executions>
			        </plugin>			
				</plugins>
			</build>
		</profile>
		

   </profiles>

   				
<!-- Uncomment to deploy to GitHub.  MUST Comment out for real release
<distributionManagement>
    <repository>
        <id>internal.repo</id>
        <name>Temporary Staging Repository</name>
        <url>file://${project.build.directory}/mvn-repo</url>
    </repository>
</distributionManagement>   				
-->
</project>
